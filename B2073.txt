这道题明显不能直接计算，因为n的最大值是10000，10^n次超出int 甚至long long int的范围,10000位小数同样不能表示
所以要一边计算一边减小a的值，这里参考除法的竖式计算
比如7/8，不够除，7变成7*10然后除以8，得到的小数部分是70/8，余数是70%8，我们用70%8作为新的被除数，再*10重复操作

在评测时如果你的代码总体思路没问题，但有一两个样例没过，这时候可能情况是①数字太大②特殊情况③某些情况没判断等等很多，一个找问题的方法是自己编点样例试一试
#include<stdio.h>

int main(void) {
    int a, b, n;
    scanf("%d%d%d", &a, &b, &n);
    if (a == b) {//特殊情况，想一下为什么要单独判断
        printf("%d", 0);
        return 0;
    }
    for (int i = 1; i < n; i++) 
        a =a*10%b;//注意这里计算的是余数，而不是第n位小数
    printf("%d", a*10/b);//输出第n位小数
    return 0;
}


这里放一下我一开始写的代码，比上面的复杂很多，但是在n很大的时候，运行速度远快于上面的代码
思路：如果是有限小数，输出0，如果是无限小数，一定是循环小数，找到循环节，计算出n位小数即可
可以自己试着写一下这个思路的代码，会很难写，但是对代码能力提升很大
我写的这个也不是特别精巧，有很多能优化的地方，参考即可

#include<stdio.h>

int main(void) {
    int a, b, n;
    int arr[10000] = { 0 };//用以存放小数部分每一位的数
    int start = 0;//表示小数部分的第一个非0数的索引
    int len = 0;//循环节的长度
    scanf_s("%d%d%d", &a, &b, &n);
    if (a % b == 0) {
        printf("%d", 0);
        return 0;
    }
    double x = 1.0 * a / b;
    for (int i = 1;; i++) {
        x *= 10;
        arr[i] = (int)x % 10;
        if (i == n) {//第n位已经计算出来了
            printf("%d", arr[i]);
            break;
        }
        if (start == 0 && arr[i] != 0) {//前面都是0，找到了小数部分第一个非0数
            start = i;
            continue;
        }
        else if (start == 0 && arr[i] == 0) {//还没找到小数部分第一个非0数，进入下一轮循环
            continue;
        }//这段代码一定要有
        else if (arr[i] == 0 &&x==(int)x) {//小数有限，想一下这里为什么要加x==(int)x，计算1/99
            printf("%d",0);//之后都是0
            break;
        }
        else if (arr[i] == arr[start]) {//无限循环小数找到了循环节
            len = start - i;
            printf("%d", arr[start + (n - start) % len]);
            break;
        }
    }//以上的break写return 0也可以的，直接结束整个程序
    return 0;
}