//先把数存到数组里面，再一个个判断就好了
#include<stdio.h>

int main(void) {
	int n;
	scanf("%d", &n);
	int x;
	int a[105] = { 0 };//这里就一定要初始化了
	for (int i = 0; i < n; i++) {
		scanf("%d", &a[i]);
	}
	int m;
	scanf("%d", &m);
	int cnt=0;
	for(int i=0;i<n;i++){
	    if(a[i]==m)
	        cnt++;
	}
	printf("%d",cnt);
	return 0;
}
//这里如果题目先告诉你m，再告诉你这n个数，就可以一边读入一边判断，不要数组了

//下面介绍一种新的计数方法，桶计数法
//先自己读一遍下面的代码，理解一下在干嘛
#include<stdio.h>

int main(void) {
	int n;
	scanf("%d", &n);
	int x;
	int a[10005] = { 0 };
	for (int i = 0; i < n; i++) {
		scanf("%d", &x);
		a[x]++;
	}
	int m;
	scanf("%d", &m);
	printf("%d", a[m]);
	return 0;
}

//其实就是我准备了一个大的数组，代表了很多很多的“桶”，它们的索引就是里面存放的东西
//当读入2的时候，a[2]++，就表示“2”桶里面多了一个元素，表示2的个数增加1，这样子我们最后要找有多少个m，就直接输出“m”桶里元素的个数就行了，就是a[m]
//这种作法比上面减少了一次循环遍历，但是用了额外的存储空间，一个大数组(其大小应该比输入的最大数大)，这就是编程中很典型的空间换时间的做法

//上面是思路的解释，但是如果你把上面这段正确的代码，放到洛谷里面去运行，其实是无法通过的，下面我们讲一个注意点
//如何才能通过呢，方法就是把数组定义在main函数之外
#include<stdio.h>

int a[10005];

int main(void) {
	int n;
	scanf("%d", &n);
	int x;
	for (int i = 0; i < n; i++) {
		scanf("%d", &x);
		a[x]++;
	}
	int m;
	scanf("%d", &m);
	printf("%d", a[m]);
	return 0;
}
//定义在main函数之外的变量，叫作全局变量，比如这里的a
//定义在main函数里面的变量，叫作局部变量，比如这里的n，x，i，m
//系统在程序运行开始时就会将全局变量所占用的内存空间分配给程序，并且将值都初始化为0。即所有二进制位都为0。
//而局部变量只有在程序运行至该变量定义所在的大括号内时，系统才会在栈空间内分配内存给该变量，且初始值不确定。

//这里我定义的a数组，虽然没有赋值，但是在程序运行的时候会自动初始化为0，这是全局变量的好处之一(其他的全局变量也会自动赋值为0)
//还有更重要的，定义一个过大的数组或容器，应当把它定义为全局变量为宜
//这样做可以得到尽可能大的内存分配。因为全局变量是储存在静态存储区分配的，空间很大。而全局变量是在栈空间上分配的，栈空间没那么大，数组太大了会溢出。
//而这就是这道题上面的代码无法通过的原因(自己电脑的编译器上没问题，因为空间足够大)，以后定义数组就放在全局变量上吧